#include <windows.h>
#include <GL/glut.h>
#include <stdlib.h>

static int year = 0, day = 0;//设置地球自转公转周期
static int longitude = 200, latitude = 200;
GLfloat  whiteLight[] = { 0.2f,0.2f,0.2f,1.0f };
GLfloat  lightPos[] = { 0.0f,0.0f,0.0f,1.0f };
int mercuryyear = 0.0, venusyear = 0.0, marsyear = 0.0, jupiteryear = 0.0, saturnyear = 0.0, uranusyear = 0.0, neptuneyear = 0.0;//八大行星公转周期,以地球作为参考
int moonyear = 0;//月亮在地球自转时需要抵消
void init(void)
{
    glClearColor(0.0, 0.0, 0.0, 0.0);
    //glClearDepth(1.0);
    glShadeModel(GL_SMOOTH);    //对多边形内部所有点的颜色通过对多边形顶点颜色插值产生，相当于gouraud明暗处理
    //glShadeModel (GL_FLAT);   //对多边形内部所有点的使用相同的颜色

    glEnable(GL_DEPTH_TEST);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_COLOR_MATERIAL);

}

void SunProperity()//太阳系几大星球的一些参数
{
    //太阳为红色
    GLfloat lmodel_ambient[] = { 1.0,0.7,0.0,1.0 };//设置光
    //GLfloat white_light[]={1.0, 1.0,1.0, 1.0};

    GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 }; //镜面放射系数,对应RGBA四个分量，A分量在混合开启后有效
    GLfloat mat_shininess[] = { 50.0 };


    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, lmodel_ambient);
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);

}

void MercuryProperity()//水星
{
    //水星为灰色
    GLfloat lmodel_ambient[] = { 0.7,0.7,0.7,1.0 };
    //GLfloat white_light[]={1.0, 1.0,1.0, 1.0};
    GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 }; //镜面放射系数,对应RGBA四个分量，A分量在混合开启后有效
    GLfloat mat_shininess[] = { 50.0 };


    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, lmodel_ambient);
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);;

}

void VenusProperity()//金星
{
    //金星为橘黄色


    GLfloat lmodel_ambient[] = { 1.0,0.8,0.3,1.0 };
    //GLfloat white_light[]={1.0, 1.0,1.0, 1.0};
    GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 }; //镜面放射系数,对应RGBA四个分量，A分量在混合开启后有效
    GLfloat mat_shininess[] = { 50.0 };


    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, lmodel_ambient);
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);

}

void EarthProperity()//地球
{
    //地球为蓝色


    GLfloat lmodel_ambient[] = { 0.0,0.0,1.0,0.9 };
    //GLfloat white_light[]={1.0, 1.0,1.0, 1.0};
    GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 }; //镜面放射系数,对应RGBA四个分量，A分量在混合开启后有效
    GLfloat mat_shininess[] = { 50.0 };


    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, lmodel_ambient);
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);

}

void MoonProperity()//月球
{
    //月球为灰色


    GLfloat lmodel_ambient[] = { 0.8,0.8,0.8,1.0 };
    //GLfloat white_light[]={1.0, 1.0,1.0, 1.0};
    GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 }; //镜面放射系数,对应RGBA四个分量，A分量在混合开启后有效
    GLfloat mat_shininess[] = { 50.0 };


    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, lmodel_ambient);
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);

}

void MarsProperity()//火星
{

    //火星为橘红色

    GLfloat lmodel_ambient[] = { 1.0,0.2,0.0,1.0 };
    //GLfloat white_light[]={1.0, 1.0,1.0, 1.0};
    GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 }; //镜面放射系数,对应RGBA四个分量，A分量在混合开启后有效
    GLfloat mat_shininess[] = { 50.0 };


    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, lmodel_ambient);
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);

}

void JupiterProperity()//木星
{
    //木星为
    GLfloat lmodel_ambient[] = { 1.0,0.4,0.2,1.0 };
    //GLfloat white_light[]={1.0, 1.0,1.0, 1.0};
    GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 }; //镜面放射系数,对应RGBA四个分量，A分量在混合开启后有效
    GLfloat mat_shininess[] = { 50.0 };


    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, lmodel_ambient);
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);

}


void SaturnProperity()//土星
{
    //棕色
    GLfloat lmodel_ambient[] = { 0.8,0.4,0.0,1.0 };
    //GLfloat white_light[]={1.0, 1.0,1.0, 1.0};
    GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 }; //镜面放射系数,对应RGBA四个分量，A分量在混合开启后有效
    GLfloat mat_shininess[] = { 50.0 };


    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, lmodel_ambient);
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);
}

void UranusProperity()//天王星
{

    //天王星为青色


    GLfloat lmodel_ambient[] = { 0.0,0.8,0.8,1.0 };
    //GLfloat white_light[]={1.0, 1.0,1.0, 1.0};
    GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 }; //镜面放射系数,对应RGBA四个分量，A分量在混合开启后有效
    GLfloat mat_shininess[] = { 50.0 };


    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, lmodel_ambient);
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);

}

void NeptuneProperity()//海王星
{
    //海王星为蓝色


    GLfloat lmodel_ambient[] = { 0.0,0.5,1.0,1.0 };
    //GLfloat white_light[]={1.0, 1.0,1.0, 1.0};
    GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 }; //镜面放射系数,对应RGBA四个分量，A分量在混合开启后有效
    GLfloat mat_shininess[] = { 50.0 };


    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, lmodel_ambient);
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);
}

void showSun()//绘制太阳
{

    glMatrixMode(GL_MODELVIEW);  //使用模型视图矩阵栈保存后面的几何变换
    glPushMatrix();
    SunProperity();
    glRotatef((GLfloat)day, 0.0, 1.0, 0.0);   //太阳自转(day,0.0,1.0,0.0)
    glutSolidSphere(1, longitude, latitude);
    glPopMatrix();

}

void showMercury()//绘制水星
{
    glPushMatrix();
    MercuryProperity();
    glRotatef((GLfloat)mercuryyear, 0.0, 1.0, 0.0);  // 旋转变换T1
    glTranslatef(1.5, 0.0, 0.0);               //  平移变换T2
    glRotatef((GLfloat)day, 0.0, 1.0, 0.0);    // 旋转变换T3
    glutSolidSphere(0.05, longitude, latitude); //绘制水星
    glPopMatrix();


}

void showVenus()//绘制金星
{
    glPushMatrix();
    VenusProperity();
    glRotatef((GLfloat)venusyear, 0.0, 1.0, 0.0);  // 旋转变换T1
    glTranslatef(1.8, 0.0, 0.0);               //  平移变换T2
    glRotatef((GLfloat)day, 0.0, 1.0, 0.0);    // 旋转变换T3
    glutSolidSphere(0.1, longitude, latitude); //绘制水星
    glPopMatrix();

}


void showEarthandMoon()//绘制地月系统
{
    glPushMatrix();
    EarthProperity();
    glRotatef((GLfloat)year, 0.0, 1.0, 0.0);  // 旋转变换T1，公转
    glTranslatef(2.3, 0.0, 0.0);               //  平移变换T2
    glRotatef((GLfloat)day, 0.0, 1.0, 0.0);    // 旋转变换T3，自转
    glutSolidSphere(0.15, longitude, latitude); //绘制地球

    MoonProperity();
    glRotatef((GLfloat)moonyear, 0.0, 1.0, 0.0);  // 旋转变换T1//公转
    glTranslatef(0.2, 0.0, 0.0);               //  平移变换T2
    glRotatef((GLfloat)day, 0.0, 1.0, 0.0);    // 旋转变换T3//自转
    glutSolidSphere(0.02, longitude, latitude); //绘制月球

    glPopMatrix();

}


void showMars()//绘制火星
{
    glPushMatrix();
    MarsProperity();
    glRotatef((GLfloat)marsyear, 0.0, 1.0, 0.0);  // 旋转变换T1
    glTranslatef(2.8, 0.0, 0.0);               //  平移变换T2
    glRotatef((GLfloat)day, 0.0, 1.0, 0.0);    // 旋转变换T3
    glutSolidSphere(0.09, longitude, latitude); //绘制火星
    glPopMatrix();

}

void showJupiter()//绘制木星
{
    glPushMatrix();
    JupiterProperity();
    glRotatef((GLfloat)jupiteryear, 0.0, 1.0, 0.0);  // 旋转变换T1
    glTranslatef(3.5, 0.0, 0.0);               //  平移变换T2
    glRotatef((GLfloat)day, 0.0, 1.0, 0.0);    // 旋转变换T3
    glutSolidSphere(0.35, longitude, latitude); //绘制木星
    glPopMatrix();

}

void showSaturn()//绘制土星
{
    glPushMatrix();
    SaturnProperity();
    glRotatef((GLfloat)saturnyear, 0.0, 1.0, 0.0);  // 旋转变换T1
    glTranslatef(4.5, 0.0, 0.0);               //  平移变换T2
    glRotatef((GLfloat)day, 0.0, 1.0, 0.0);    // 旋转变换T3
    glutSolidSphere(0.22, longitude, latitude); //绘制土星
    //绘制行星环

    glRotatef(90, 1.0, 0, 0.0);
    glutSolidTorus(0.01, 0.35, 3, 100);
    glRotatef(-90, 1.0, 0, 0.0);
    glPopMatrix();

}

void showUranus()//绘制天王星
{
    glPushMatrix();
    UranusProperity();
    glRotatef((GLfloat)uranusyear, 0.0, 1.0, 0.0);  // 旋转变换T1
    glTranslatef(5.3, 0.0, 0.0);               //  平移变换T2
    glRotatef((GLfloat)day, 0.0, 1.0, 0.0);    // 旋转变换T3
    glutSolidSphere(0.17, longitude, latitude); //绘制天王星
    glPopMatrix();

}


void showNeptune()//绘制海王星
{
    glPushMatrix();
    NeptuneProperity();
    glRotatef((GLfloat)neptuneyear, 0.0, 1.0, 0.0);  // 旋转变换T1
    glTranslatef(5.9, 0.0, 0.0);               //  平移变换T2
    glRotatef((GLfloat)day, 0.0, 1.0, 0.0);    // 旋转变换T3
    glutSolidSphere(0.16, longitude, latitude); //绘制天王星
    glPopMatrix();

}

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    showSun();//绘制太阳
    showMercury();//绘制水星
    showVenus();//绘制金星
    showEarthandMoon();//绘制地月系统
    showMars();//绘制火星
    showJupiter();//绘制木星
    showSaturn();//绘制土星
    showUranus();//绘制天王星
    showNeptune();//绘制海王星

    glutSwapBuffers();
}

void reshape(int w, int h)
{
    glViewport(0, 0, (GLsizei)w, (GLsizei)h);  //使视区大小保持与窗口的显示区域大小一致
    glMatrixMode(GL_MODELVIEW);                    //使用模型视图矩阵栈
    glLoadIdentity();
    gluLookAt(0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);

    glMatrixMode(GL_PROJECTION);                 //使用投影矩阵栈，准备设定投影矩阵
    glLoadIdentity();                            //初始化投影矩阵为单位矩阵
    gluPerspective(60.0, (GLfloat)w / (GLfloat)h, 0.5, 30.0);
}

void keyboard(unsigned char key, int x, int y)//键盘交互功能
{
    switch (key) {
    case 'e':
        day = (day + 10) % 360;   //增加自转的角度，逆时针旋转
        moonyear = (moonyear - 10) % 360;//此时月球需要抵消地球的的影响
        glutPostRedisplay();
        break;
    case 'E':
        day = (day - 10) % 360;   //减少自转的角度，顺时针旋转
        moonyear = (moonyear + 10) % 360;//此时月球需要抵消地球的的影响，不能跟着旋转，所以需要反方向旋转相同的角度
        glutPostRedisplay();
        break;
    case 's':
        year = (year + 6) % 360;  //增加公转的角度，逆时针旋转
        mercuryyear = (mercuryyear + 10) % 360;
        venusyear = (venusyear + 8) % 360;
        marsyear = (marsyear + 5) % 360;
        jupiteryear = (jupiteryear + 4) % 360;
        saturnyear = (saturnyear + 3) % 360;
        uranusyear = (uranusyear + 2) % 360;
        neptuneyear = (neptuneyear + 1) % 360;
        glutPostRedisplay();
        break;
    case 'S':
        year = (year - 6) % 360;  //减少公转的角度，顺时针旋转
        mercuryyear = (mercuryyear - 10) % 360;
        venusyear = (venusyear - 8) % 360;
        marsyear = (marsyear - 5) % 360;
        jupiteryear = (jupiteryear - 4) % 360;
        saturnyear = (saturnyear - 3) % 360;
        uranusyear = (uranusyear - 2) % 360;
        neptuneyear = (neptuneyear - 1) % 360;
        glutPostRedisplay();
        break;
    case 'y':
        day = (day + 10) % 360;   //减少自转的角度，顺时针旋转,此时不需要抵消影响
        glutPostRedisplay();
        break;
    case 'Y':
        day = (day - 10) % 360;   //减少自转的角度，顺时针旋转,此时不需要抵消影响
        glutPostRedisplay();
        break;
        break;
    case 'l':
        glPolygonMode(GL_FRONT_AND_BACK, GL_LINE); //使用线框模型显示物体
        glDisable(GL_LIGHTING);
        longitude = 20;
        latitude = 16;
        glutPostRedisplay();
        break;
    case 'f':
        glPolygonMode(GL_FRONT_AND_BACK, GL_FILL); //使用多边形填充模型型显示物体
        glEnable(GL_LIGHTING);
        longitude = 200;
        latitude = 200;
        glutPostRedisplay();
        break;
    case 27:
        exit(0);
        break;
    default:
        break;
    }
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(800, 600);
    glutInitWindowPosition(50, 50);
    glutCreateWindow(argv[0]);
    init();
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutMainLoop();
    return 0;
}
